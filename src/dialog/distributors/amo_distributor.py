import asyncio

from datetime import datetime
from sqlalchemy.exc import DBAPIError
from werkzeug.datastructures import ImmutableMultiDict

from src.api.amoCRM.leads import LeadFetcher
from src.api.amoCRM.contacts import ContactFetcher
from src.api.amoCRM.pipelines import PipelineFetcher
from src.api.amoCRM.custom_fields import CustomFieldsFetcher
from src.api.amoCRM.tags import TagsFetcher
from src.api.amoCRM.tasks import TaskFetcher
from src.api.radistonline.chats import RadistOnlineChats
from src.api.radistonline.messages import RadistonlineMessages

from src.core.config import logger, settings
from src.core.texts import TaskTexts

from src.dialog.objections.assistant import Assistant
from src.dialog.objections.llm_instructor import SurveyInitialCheck

from src.orm.crud.amo_leads import AmoLeadsCRUD
from src.orm.crud.radist_chats import ChatStepsCRUD
from src.orm.crud.amo_contacts import AmoContactsCRUD


async def chat_id_proceed(chat_id: int, lead_id: int, contact_id: int, survey_data: dict, segment: str):
    await AmoLeadsCRUD.save_new_chat_id(lead_id=int(lead_id), chat_id=int(chat_id))

    # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–∞–∑—É —Å —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤
    await ChatStepsCRUD.update(chat_id=chat_id, step="registration")
    text = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ü§ó –í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π. '
        '–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–µ—á–∏ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞!'
        '\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏–Ω–∞, —è –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.'
    )
    await RadistonlineMessages.send_message(chat_id=int(chat_id), text=text)
    await Assistant.get_first_registration_message(chat_id=chat_id)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–¥–µ–ª–∫–µ —Å ID {lead_id}")

    # –°–æ–±–∏—Ä–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –¥–ª—è –ë–î
    child_info = {
        "city": survey_data["–°—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥"],
        "child_name": survey_data["–ò–º—è —Ä–µ–±—ë–Ω–∫–∞"],
        "child_birth_date": survey_data["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
        "doctor_enquiry": survey_data["–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–ø—Ä–æ—Å–µ"],
        "diagnosis": survey_data['–î–∏–∞–≥–Ω–æ–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)'],
        "segment": segment,
    }
    try:
        await AmoContactsCRUD.update_contact_values(
            contact_id=contact_id,
            update_columns=child_info
        )
    except DBAPIError as e:
        child_info['child_birth_date'] = datetime.fromtimestamp(
            survey_data["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"])
        await AmoContactsCRUD.update_contact_values(
            contact_id=contact_id,
            update_columns=child_info
        )
        logger.error(f"DBAPIError, LEAD ID: {lead_id}: " + str(e))


async def proceed_new_lead(lead_id, new_status_id=None):
    # –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
    new_lead_data = await LeadFetcher.get_lead(lead_id=lead_id)
    try:
        contact_id = new_lead_data['_embedded']['contacts'][0]['id']
    except IndexError:
        await asyncio.sleep(30)
        new_lead_data = await LeadFetcher.get_lead(lead_id=lead_id)
        contact_id = new_lead_data['_embedded']['contacts'][0]['id']
    logger.info(f"ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–¥–µ–ª–∫–µ #{lead_id}: {contact_id}")

    contact_data = await ContactFetcher.get_contact_by_id(contact_id)
    contact_name = contact_data['name']
    name = contact_name + '_' * (5 - len(contact_name)) if len(contact_name) < 5 else contact_name
    try:
        phone_number = next(
            (cfv['values'][0]['value'] for cfv in contact_data['custom_fields_values'] if
             cfv['field_name'] == '–¢–µ–ª–µ—Ñ–æ–Ω'), None)
    except TypeError as e:
        phone_number = await ContactFetcher.get_contact_number_by_company(contact_id)
        logger.error(f"TypeError: LEAD ID: {lead_id}: " + str(e))

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if "–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:," in phone_number:
        phone_number = phone_number.replace(" –î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:,", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ –∏ –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    await AmoLeadsCRUD.save_new_lead(new_lead_data, contact_data, phone_number)
    if new_status_id:
        await AmoLeadsCRUD.change_lead_status(int(lead_id), int(new_status_id))

    # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ 'partner' –∏–ª–∏ 'Flocktory' –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–Ω–∫–µ—Ç–µ
    custom_fields = await CustomFieldsFetcher.get_survey_lead_fields(lead_id=lead_id)
    try:
        utm_source = custom_fields['utm_source']
    except (TypeError, KeyError):
        utm_source = None
    if utm_source == 'Flocktory' or utm_source is None:
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–Ω–∫–µ—Ç–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{lead_id}")
        survey_data = None
    else:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–Ω–∫–µ—Ç–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{lead_id}")

        # –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥—ã–µ 30
        # —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –æ–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç 5 –º–∏–Ω—É—Ç
        survey_data = await CustomFieldsFetcher.get_child_data(lead_id=lead_id)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã –≤ —Å–¥–µ–ª–∫–µ #{lead_id}: {survey_data}")
        timeout = 0
        while survey_data in [{}, None] and timeout < 300:
            await asyncio.sleep(30)
            timeout += 30
            logger.info(f"–û–∂–∏–¥–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ —Å–¥–µ–ª–∫–µ #{lead_id}. –ü—Ä–æ—à–ª–æ {timeout} —Å–µ–∫—É–Ω–¥.")
            survey_data = await CustomFieldsFetcher.get_child_data(lead_id=lead_id)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞: {survey_data}")
            continue
    if survey_data and survey_data != {}:
        # –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
        baby_age_month, segment, for_online = await SurveyInitialCheck.get_survey_initial_check(
            survey_data)
        logger.info(f"–°–¥–µ–ª–∫–∞ #{lead_id}: –ú–µ—Å—è—Ü—ã: {baby_age_month}, –°–µ–≥–º–µ–Ω—Ç: {segment}, –û–Ω–ª–∞–π–Ω: {for_online}")
        # –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ –º—ã –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
        if baby_age_month > 42 and segment != "C" and for_online:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ Radist.Online –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –ë–î
                chat_id = await RadistOnlineChats.create_new_chat(
                    name=name,
                    phone=phone_number
                )
                if chat_id:
                    chat_id = int(chat_id)
                    await chat_id_proceed(chat_id, lead_id, contact_id, survey_data, segment)
                else:
                    # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ Radist.Online –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ—â—ë —Ä–∞–∑
                    logger.info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–¥–µ–ª–∫–µ #{lead_id}, –ø—Ä–æ–±–ª–µ–º–∞ —Å Radist.Online, —Ç–∞–π–º-–∞—É—Ç: 300")
                    await asyncio.sleep(300)
                    chat_id = await RadistOnlineChats.create_new_chat(
                        name=name,
                        phone=phone_number
                    )
                    if chat_id:
                        chat_id = int(chat_id)
                        await chat_id_proceed(chat_id, lead_id, contact_id, survey_data, segment)
                    else:
                        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–¥–µ–ª–∫–µ #{lead_id}, –ø—Ä–æ–±–ª–µ–º–∞ —Å Radist.Online")
                        await CustomFieldsFetcher.change_status(lead_id, phone_number)
                        await LeadFetcher.change_lead_status(lead_id, '–í —Ä–∞–±–æ—Ç–µ ( –Ω–µ –±—ã–ª–æ –∑–≤–æ–Ω–∫–∞)')
            except Exception as e:
                logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –≤ Radist.Online: {e}. –°–¥–µ–ª–∫–∞ #{lead_id}")
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if baby_age_month < 42:
                tag_name = '–º–ª–∞–¥—à–µ 3,6'
            elif segment == "C":
                tag_name = '—Å–µ–≥–º–µ–Ω—Ç –°'
            else:
                tag_name = '–¥–∏–∞–≥–Ω–æ–∑'

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
            await LeadFetcher.change_lead_status(lead_id=lead_id, status_name='–¢–†–ï–ë–£–ï–¢–°–Ø –ú–ï–ù–ï–î–ñ–ï–†')
            await TaskFetcher.set_task(lead_id=lead_id, task_text=TaskTexts.NEED_MANAGER_TEXT)
            await TagsFetcher.add_new_tag(lead_id=lead_id, tag_name=tag_name)
            logger.info(f"–°–¥–µ–ª–∫–∞ #{lead_id} –Ω–µ –ø—Ä–æ—à–ª–∞ –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–µ–≥: {tag_name}")
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ Radist.Online –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –ë–î
        try:
            chat_id = await RadistOnlineChats.create_new_chat(
                name=name,
                phone=phone_number
            )
            if chat_id:
                chat_id = int(chat_id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –ë–î
                await AmoLeadsCRUD.save_new_chat_id(lead_id=int(lead_id), chat_id=int(chat_id))
                await ChatStepsCRUD.update(chat_id=chat_id, step="survey")
                # –ó–¥–µ—Å—å –ø–µ—Ä–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
                await Assistant.get_survey_response_stream(
                    chat_id=chat_id,
                    lead_id=lead_id,
                    contact_id=contact_id,
                    new_messages="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ —Å ID {lead_id}")
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–≥ survey, –≤ –∫–æ—Ç–æ—Ä–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.
            else:
                # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ Radist.Online –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ—â—ë —Ä–∞–∑
                logger.info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–¥–µ–ª–∫–µ #{lead_id}, –ø—Ä–æ–±–ª–µ–º–∞ —Å Radist.Online, —Ç–∞–π–º-–∞—É—Ç: 300")
                await asyncio.sleep(300)
                chat_id = await RadistOnlineChats.create_new_chat(
                    name=name,
                    phone=phone_number
                )
                if chat_id:
                    chat_id = int(chat_id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –ë–î
                    await AmoLeadsCRUD.save_new_chat_id(lead_id=int(lead_id), chat_id=int(chat_id))
                    await ChatStepsCRUD.update(chat_id=chat_id, step="survey")
                    # –ó–¥–µ—Å—å –ø–µ—Ä–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
                    await Assistant.get_survey_response_stream(
                        chat_id=chat_id,
                        lead_id=lead_id,
                        contact_id=contact_id,
                        new_messages="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ —Å ID {lead_id}")
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–≥ survey, –≤ –∫–æ—Ç–æ—Ä–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.
                else:
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–¥–µ–ª–∫–µ #{lead_id}, –ø—Ä–æ–±–ª–µ–º–∞ —Å Radist.Online")
                    await CustomFieldsFetcher.change_status(lead_id, phone_number)
                    await LeadFetcher.change_lead_status(lead_id, '–í —Ä–∞–±–æ—Ç–µ ( –Ω–µ –±—ã–ª–æ –∑–≤–æ–Ω–∫–∞)')
        except Exception as e:
            logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –≤ Radist.Online: {e}. –°–¥–µ–ª–∫–∞ #{lead_id}")


async def amo_data_processing(data):
    """
    –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫, —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–¥–µ–ª–æ–∫ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ amoCRM

    :param data: –°–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–∏–¥ –∏ –ø–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
    data = ImmutableMultiDict(data).to_dict()
    try:
        # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∞–º –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        contact_id = data['contacts[update][0][id]']
        contact_renamed = await AmoContactsCRUD.get_renamed_contact(int(contact_id))
        if contact_renamed:
            lead_id = await AmoLeadsCRUD.get_lead_id_by_contact_id(contact_id=int(contact_id))
            if lead_id:
                lead_renamed = await AmoLeadsCRUD.get_lead_by_id(int(lead_id))
                if lead_renamed:
                    await LeadFetcher.change_lead_name(lead_id=str(lead_id), new_name=lead_renamed)
                    await AmoLeadsCRUD.change_renamed_status(int(lead_id))
            await ContactFetcher.rename_contact(contact_id=contact_id, new_name=contact_renamed)
            await AmoContactsCRUD.changed_renamed_status(int(contact_id))
            logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –∏ —Å–¥–µ–ª–∫–∞ {lead_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã")
        else:
            pass
    except KeyError:
        # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –∏ –≤–æ—Ä–æ–Ω–∫–∏
        await asyncio.sleep(60)
        try:
            lead_id = data['leads[add][0][id]']
            pipeline_id = int(data['leads[add][0][pipeline_id]'])
            if pipeline_id == settings.LOGOPOTAM_PIPELINE_ID:
                new_status_id = int(data['leads[add][0][status_id]'])  # noqa
                new_status_name = await PipelineFetcher.get_pipeline_status_name_by_id(new_status_id)
                if new_status_name != "–°–¢–ê–†–¢ –ù–ï–ô–†–û":
                    await LeadFetcher.change_lead_status(lead_id=lead_id, status_name='–°–¢–ê–†–¢ –ù–ï–ô–†–û')
                    logger.info(f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: {lead_id}. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –Ω–∞ –°–¢–ê–†–¢ –ù–ï–ô–†–û")
                    await proceed_new_lead(lead_id)
                else:
                    logger.info(f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{lead_id} –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ –°–¢–ê–†–¢ –ù–ï–ô–†–û, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ")
            else:
                logger.info(f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{lead_id} –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–æ—Ä–æ–Ω–∫–µ –õ–æ–≥–æ–ø–æ—Ç–∞–º")

        except KeyError:
            lead_id = data['leads[status][0][id]']
            pipeline_id = int(data['leads[status][0][pipeline_id]'])
            if pipeline_id == settings.LOGOPOTAM_PIPELINE_ID:
                new_status_id = int(data['leads[status][0][status_id]'])  # noqa
                new_status_name = await PipelineFetcher.get_pipeline_status_name_by_id(new_status_id)
                lead_exist = await AmoLeadsCRUD.get_lead_by_id(int(lead_id))
                if lead_exist:
                    await AmoLeadsCRUD.change_lead_status(int(lead_id), new_status_id)
                else:
                    if new_status_name == "–°–¢–ê–†–¢ –ù–ï–ô–†–û":
                        logger.info(f"NEW LEAD: {lead_id}, {pipeline_id}, {new_status_id}, {new_status_name}")
                        await proceed_new_lead(lead_id, new_status_id)
            else:
                logger.info(f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{lead_id} –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–æ—Ä–æ–Ω–∫–µ –õ–æ–≥–æ–ø–æ—Ç–∞–º")
                pass
